// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<C, M, R = aws_smithy_client::retry::Standard> {
    pub(crate) client: aws_smithy_client::Client<C, M, R>,
    pub(crate) conf: crate::Config,
}

/// An ergonomic service client for `PokemonService`.
///
/// This client allows ergonomic access to a `PokemonService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Constructing a Client
///
/// To construct a client, you need a few different things:
///
/// - A [`Config`](crate::Config) that specifies additional configuration
///   required by the service.
/// - A connector (`C`) that specifies how HTTP requests are translated
///   into HTTP responses. This will typically be an HTTP client (like
///   `hyper`), though you can also substitute in your own, like a mock
///   mock connector for testing.
/// - A "middleware" (`M`) that modifies requests prior to them being
///   sent to the request. Most commonly, middleware will decide what
///   endpoint the requests should be sent to, as well as perform
///   authentication and authorization of requests (such as SigV4).
///   You can also have middleware that performs request/response
///   tracing, throttling, or other middleware-like tasks.
/// - A retry policy (`R`) that dictates the behavior for requests that
///   fail and should (potentially) be retried. The default type is
///   generally what you want, as it implements a well-vetted retry
///   policy implemented in [`RetryMode::Standard`](aws_smithy_types::retry::RetryMode::Standard).
///
/// To construct a client, you will generally want to call
/// [`Client::with_config`], which takes a [`aws_smithy_client::Client`] (a
/// Smithy client that isn't specialized to a particular service),
/// and a [`Config`](crate::Config). Both of these are constructed using
/// the [builder pattern] where you first construct a `Builder` type,
/// then configure it with the necessary parameters, and then call
/// `build` to construct the finalized output type. The
/// [`aws_smithy_client::Client`] builder is re-exported in this crate as
/// [`Builder`] for convenience.
///
/// In _most_ circumstances, you will want to use the following pattern
/// to construct a client:
///
/// ```
/// use pokemon_service_client::{Builder, Client, Config};
///
/// let smithy_client = Builder::new()
///       .dyn_https_connector(Default::default())
/// #     /*
///       .middleware(/* discussed below */)
/// #     */
/// #     .middleware_fn(|r| r)
///       .build();
/// let config = Config::builder().build();
/// let client = Client::with_config(smithy_client, config);
/// ```
///
/// For the middleware, you'll want to use whatever matches the
/// routing, authentication and authorization required by the target
/// service. For example, for the standard AWS SDK which uses
/// [SigV4-signed requests], the middleware looks like this:
///
// Ignored as otherwise we'd need to pull in all these dev-dependencies.
/// ```rust,ignore
/// use aws_endpoint::AwsEndpointStage;
/// use aws_http::auth::CredentialsStage;
/// use aws_http::recursion_detection::RecursionDetectionStage;
/// use aws_http::user_agent::UserAgentStage;
/// use aws_sig_auth::middleware::SigV4SigningStage;
/// use aws_sig_auth::signer::SigV4Signer;
/// use aws_smithy_client::retry::Config as RetryConfig;
/// use aws_smithy_http_tower::map_request::{AsyncMapRequestLayer, MapRequestLayer};
/// use std::fmt::Debug;
/// use tower::layer::util::{Identity, Stack};
/// use tower::ServiceBuilder;
///
/// type AwsMiddlewareStack = Stack<
///     MapRequestLayer<RecursionDetectionStage>,
///     Stack<
///         MapRequestLayer<SigV4SigningStage>,
///         Stack<
///             AsyncMapRequestLayer<CredentialsStage>,
///             Stack<
///                 MapRequestLayer<UserAgentStage>,
///                 Stack<MapRequestLayer<AwsEndpointStage>, Identity>,
///             >,
///         >,
///     >,
/// >;
///
/// /// AWS Middleware Stack
/// ///
/// /// This implements the middleware stack for this service. It will:
/// /// 1. Load credentials asynchronously into the property bag
/// /// 2. Sign the request with SigV4
/// /// 3. Resolve an Endpoint for the request
/// /// 4. Add a user agent to the request
/// #[derive(Debug, Default, Clone)]
/// #[non_exhaustive]
/// pub struct AwsMiddleware;
///
/// impl AwsMiddleware {
///     /// Create a new `AwsMiddleware` stack
///     ///
///     /// Note: `AwsMiddleware` holds no state.
///     pub fn new() -> Self {
///         AwsMiddleware::default()
///     }
/// }
///
/// // define the middleware stack in a non-generic location to reduce code bloat.
/// fn base() -> ServiceBuilder<AwsMiddlewareStack> {
///     let credential_provider = AsyncMapRequestLayer::for_mapper(CredentialsStage::new());
///     let signer = MapRequestLayer::for_mapper(SigV4SigningStage::new(SigV4Signer::new()));
///     let endpoint_resolver = MapRequestLayer::for_mapper(AwsEndpointStage);
///     let user_agent = MapRequestLayer::for_mapper(UserAgentStage::new());
///     let recursion_detection = MapRequestLayer::for_mapper(RecursionDetectionStage::new());
///     // These layers can be considered as occurring in order, that is:
///     // 1. Resolve an endpoint
///     // 2. Add a user agent
///     // 3. Acquire credentials
///     // 4. Sign with credentials
///     // (5. Dispatch over the wire)
///     ServiceBuilder::new()
///         .layer(endpoint_resolver)
///         .layer(user_agent)
///         .layer(credential_provider)
///         .layer(signer)
///         .layer(recursion_detection)
/// }
///
/// impl<S> tower::Layer<S> for AwsMiddleware {
///     type Service = <AwsMiddlewareStack as tower::Layer<S>>::Service;
///
///     fn layer(&self, inner: S) -> Self::Service {
///         base().service(inner)
///     }
/// }
/// ```
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<C, M, R = aws_smithy_client::retry::Standard> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the [`CheckHealth`](crate::client::fluent_builders::CheckHealth) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::CheckHealth::send) it.

    /// - On success, responds with [`CheckHealthOutput`](crate::output::CheckHealthOutput)

    /// - On failure, responds with [`SdkError<CheckHealthError>`](crate::error::CheckHealthError)
    pub fn check_health(&self) -> fluent_builders::CheckHealth<C, M, R> {
        fluent_builders::CheckHealth::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DoNothing`](crate::client::fluent_builders::DoNothing) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DoNothing::send) it.

    /// - On success, responds with [`DoNothingOutput`](crate::output::DoNothingOutput)

    /// - On failure, responds with [`SdkError<DoNothingError>`](crate::error::DoNothingError)
    pub fn do_nothing(&self) -> fluent_builders::DoNothing<C, M, R> {
        fluent_builders::DoNothing::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPokemonSpecies`](crate::client::fluent_builders::GetPokemonSpecies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetPokemonSpecies::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetPokemonSpecies::set_name): (undocumented)
    /// - On success, responds with [`GetPokemonSpeciesOutput`](crate::output::GetPokemonSpeciesOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::output::GetPokemonSpeciesOutput::name): The name for this resource.
    ///   - [`flavor_text_entries(Option<Vec<FlavorText>>)`](crate::output::GetPokemonSpeciesOutput::flavor_text_entries): A list of flavor text entries for this Pok√©mon species.
    /// - On failure, responds with [`SdkError<GetPokemonSpeciesError>`](crate::error::GetPokemonSpeciesError)
    pub fn get_pokemon_species(&self) -> fluent_builders::GetPokemonSpecies<C, M, R> {
        fluent_builders::GetPokemonSpecies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetServerStatistics`](crate::client::fluent_builders::GetServerStatistics) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetServerStatistics::send) it.

    /// - On success, responds with [`GetServerStatisticsOutput`](crate::output::GetServerStatisticsOutput) with field(s):
    ///   - [`calls_count(Option<i64>)`](crate::output::GetServerStatisticsOutput::calls_count): The number of calls executed by the server.
    /// - On failure, responds with [`SdkError<GetServerStatisticsError>`](crate::error::GetServerStatisticsError)
    pub fn get_server_statistics(&self) -> fluent_builders::GetServerStatistics<C, M, R> {
        fluent_builders::GetServerStatistics::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CapturePokemon`](crate::client::fluent_builders::CapturePokemon) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`events(EventStreamSender<crate::model::AttemptCapturingPokemonEvent, crate::error::AttemptCapturingPokemonEventError>)`](crate::client::fluent_builders::CapturePokemon::events) / [`set_events(EventStreamSender<crate::model::AttemptCapturingPokemonEvent, crate::error::AttemptCapturingPokemonEventError>)`](crate::client::fluent_builders::CapturePokemon::set_events): (undocumented)
    ///   - [`region(impl Into<String>)`](crate::client::fluent_builders::CapturePokemon::region) / [`set_region(Option<String>)`](crate::client::fluent_builders::CapturePokemon::set_region): (undocumented)
    /// - On success, responds with [`CapturePokemonOutput`](crate::output::CapturePokemonOutput) with field(s):
    ///   - [`events(Receiver<crate::model::CapturePokemonEvents, crate::error::CapturePokemonEventsError>)`](crate::output::CapturePokemonOutput::events): (undocumented)
    /// - On failure, responds with [`SdkError<CapturePokemonError>`](crate::error::CapturePokemonError)
    pub fn capture_pokemon(&self) -> fluent_builders::CapturePokemon<C, M, R> {
        fluent_builders::CapturePokemon::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetStorage`](crate::client::fluent_builders::GetStorage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user(impl Into<String>)`](crate::client::fluent_builders::GetStorage::user) / [`set_user(Option<String>)`](crate::client::fluent_builders::GetStorage::set_user): (undocumented)
    ///   - [`passcode(impl Into<String>)`](crate::client::fluent_builders::GetStorage::passcode) / [`set_passcode(Option<String>)`](crate::client::fluent_builders::GetStorage::set_passcode): (undocumented)
    /// - On success, responds with [`GetStorageOutput`](crate::output::GetStorageOutput) with field(s):
    ///   - [`collection(Option<Vec<String>>)`](crate::output::GetStorageOutput::collection): A list of Pok√©mon species.
    /// - On failure, responds with [`SdkError<GetStorageError>`](crate::error::GetStorageError)
    pub fn get_storage(&self) -> fluent_builders::GetStorage<C, M, R> {
        fluent_builders::GetStorage::new(self.handle.clone())
    }
}
pub mod fluent_builders {

    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `CheckHealth`.
    ///
    /// Health check operation, to check the service is up Not yet a deep check
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CheckHealth<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::check_health_input::Builder,
    }
    impl<C, M, R> CheckHealth<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CheckHealth`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CheckHealth,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::CheckHealthError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::CheckHealth,
                crate::output::CheckHealthOutput,
                crate::error::CheckHealthError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CheckHealthOutput,
            aws_smithy_http::result::SdkError<crate::error::CheckHealthError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::CheckHealth,
                crate::output::CheckHealthOutput,
                crate::error::CheckHealthError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `DoNothing`.
    ///
    /// DoNothing operation, used to stress test the framework.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DoNothing<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::do_nothing_input::Builder,
    }
    impl<C, M, R> DoNothing<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DoNothing`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DoNothing,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::DoNothingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::DoNothing,
                crate::output::DoNothingOutput,
                crate::error::DoNothingError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DoNothingOutput,
            aws_smithy_http::result::SdkError<crate::error::DoNothingError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::DoNothing,
                crate::output::DoNothingOutput,
                crate::error::DoNothingError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `GetPokemonSpecies`.
    ///
    /// Retrieve information about a Pok√©mon species.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetPokemonSpecies<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_pokemon_species_input::Builder,
    }
    impl<C, M, R> GetPokemonSpecies<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetPokemonSpecies`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetPokemonSpecies,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetPokemonSpeciesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetPokemonSpecies,
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetPokemonSpeciesOutput,
            aws_smithy_http::result::SdkError<crate::error::GetPokemonSpeciesError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetPokemonSpecies,
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetServerStatistics`.
    ///
    /// Retrieve HTTP server statistiscs, such as calls count.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetServerStatistics<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_server_statistics_input::Builder,
    }
    impl<C, M, R> GetServerStatistics<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetServerStatistics`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetServerStatistics,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetServerStatisticsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetServerStatistics,
                crate::output::GetServerStatisticsOutput,
                crate::error::GetServerStatisticsError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetServerStatisticsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetServerStatisticsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetServerStatistics,
                crate::output::GetServerStatisticsOutput,
                crate::error::GetServerStatisticsError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
    }
    /// Fluent builder constructing a request to `CapturePokemon`.
    ///
    /// Capture Pok√©mons via event streams.
    #[derive(std::fmt::Debug)]
    pub struct CapturePokemon<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::capture_pokemon_input::Builder,
    }
    impl<C, M, R> CapturePokemon<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CapturePokemon`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CapturePokemon,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::CapturePokemonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::CapturePokemon,
                crate::output::CapturePokemonOutput,
                crate::error::CapturePokemonError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CapturePokemonOutput,
            aws_smithy_http::result::SdkError<crate::error::CapturePokemonError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::CapturePokemon,
                crate::output::CapturePokemonOutput,
                crate::error::CapturePokemonError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn events(
            mut self,
            input: aws_smithy_http::event_stream::EventStreamSender<
                crate::model::AttemptCapturingPokemonEvent,
                crate::error::AttemptCapturingPokemonEventError,
            >,
        ) -> Self {
            self.inner = self.inner.events(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_events(
            mut self,
            input: std::option::Option<
                aws_smithy_http::event_stream::EventStreamSender<
                    crate::model::AttemptCapturingPokemonEvent,
                    crate::error::AttemptCapturingPokemonEventError,
                >,
            >,
        ) -> Self {
            self.inner = self.inner.set_events(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.region(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_region(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetStorage`.
    ///
    /// Retrieve information about your Pokedex.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetStorage<C, M, R = aws_smithy_client::retry::Standard> {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_storage_input::Builder,
    }
    impl<C, M, R> GetStorage<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetStorage`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetStorage,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
                C,
                M,
                R,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetStorageError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetStorage,
                crate::output::GetStorageOutput,
                crate::error::GetStorageError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetStorageOutput,
            aws_smithy_http::result::SdkError<crate::error::GetStorageError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::operation::GetStorage,
                crate::output::GetStorageOutput,
                crate::error::GetStorageError,
                aws_smithy_http::retry::DefaultResponseRetryClassifier,
            >,
        {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn user(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn passcode(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.passcode(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_passcode(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_passcode(input);
            self
        }
    }
}
