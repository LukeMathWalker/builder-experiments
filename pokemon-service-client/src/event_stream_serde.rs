// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(Debug)]
pub struct AttemptCapturingPokemonEventErrorMarshaller;

impl AttemptCapturingPokemonEventErrorMarshaller {
    pub fn new() -> Self {
        AttemptCapturingPokemonEventErrorMarshaller
    }
}
impl aws_smithy_eventstream::frame::MarshallMessage
    for AttemptCapturingPokemonEventErrorMarshaller
{
    type Input = crate::error::AttemptCapturingPokemonEventError;
    fn marshall(
        &self,
        _input: Self::Input,
    ) -> std::result::Result<
        aws_smithy_eventstream::frame::Message,
        aws_smithy_eventstream::error::Error,
    > {
        let mut headers = Vec::new();
        headers.push(aws_smithy_eventstream::frame::Header::new(
            ":message-type",
            aws_smithy_eventstream::frame::HeaderValue::String("exception".into()),
        ));
        let payload = match _input.kind {
            crate::error::AttemptCapturingPokemonEventErrorKind::MasterBallUnsuccessful(inner) =>  {
                headers.push(aws_smithy_eventstream::frame::Header::new(":exception-type", aws_smithy_eventstream::frame::HeaderValue::String("masterball_unsuccessful".into())));
                headers.push(aws_smithy_eventstream::frame::Header::new(":content-type", aws_smithy_eventstream::frame::HeaderValue::String("application/vnd.amazon.eventstream".into())));
                crate::operation_ser::serialize_structure_crate_error_master_ball_unsuccessful(&inner)
                                            .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
            }
            crate::error::AttemptCapturingPokemonEventErrorKind::Unhandled(_inner) => return Err(
                                                aws_smithy_eventstream::error::Error::Marshalling("Cannot serialize `AttemptCapturingPokemonEvent::Unknown` for the request. The `Unknown` variant is intended for responses only. It occurs when an outdated client is used after a new enum variant was added on the server side.".to_owned())
                                            ),
        }
        ;
        Ok(aws_smithy_eventstream::frame::Message::new_from_parts(
            headers, payload,
        ))
    }
}

#[non_exhaustive]
#[derive(Debug)]
pub struct AttemptCapturingPokemonEventMarshaller;

impl AttemptCapturingPokemonEventMarshaller {
    pub fn new() -> Self {
        AttemptCapturingPokemonEventMarshaller
    }
}
impl aws_smithy_eventstream::frame::MarshallMessage for AttemptCapturingPokemonEventMarshaller {
    type Input = crate::model::AttemptCapturingPokemonEvent;
    fn marshall(
        &self,
        input: Self::Input,
    ) -> std::result::Result<
        aws_smithy_eventstream::frame::Message,
        aws_smithy_eventstream::error::Error,
    > {
        let mut headers = Vec::new();
        headers.push(aws_smithy_eventstream::frame::Header::new(
            ":message-type",
            aws_smithy_eventstream::frame::HeaderValue::String("event".into()),
        ));
        let payload = match input {
            Self::Input::Event(inner) =>  {
                headers.push(aws_smithy_eventstream::frame::Header::new(":event-type", aws_smithy_eventstream::frame::HeaderValue::String("event".into())));
                headers.push(aws_smithy_eventstream::frame::Header::new(":content-type", aws_smithy_eventstream::frame::HeaderValue::String("application/vnd.amazon.eventstream".into())));
                if let Some(inner_payload) = inner.payload {
                    crate::operation_ser::serialize_member_com_aws_example_rust_capturing_event_payload(&inner_payload)
                                                .map_err(|err| aws_smithy_eventstream::error::Error::Marshalling(format!("{}", err)))?
                }
                 else  {
                    unimplemented!("TODO(EventStream): Figure out what to do when there's no payload")
                }
            }
            Self::Input::Unknown => return Err(
                                            aws_smithy_eventstream::error::Error::Marshalling("Cannot serialize `AttemptCapturingPokemonEvent::Unknown` for the request. The `Unknown` variant is intended for responses only. It occurs when an outdated client is used after a new enum variant was added on the server side.".to_owned())
                                        )
        }
        ;
        Ok(aws_smithy_eventstream::frame::Message::new_from_parts(
            headers, payload,
        ))
    }
}

#[non_exhaustive]
#[derive(Debug)]
pub struct CapturePokemonEventsUnmarshaller;

impl CapturePokemonEventsUnmarshaller {
    pub fn new() -> Self {
        CapturePokemonEventsUnmarshaller
    }
}
impl aws_smithy_eventstream::frame::UnmarshallMessage for CapturePokemonEventsUnmarshaller {
    type Output = crate::model::CapturePokemonEvents;
    type Error = crate::error::CapturePokemonEventsError;
    fn unmarshall(
        &self,
        message: &aws_smithy_eventstream::frame::Message,
    ) -> std::result::Result<
        aws_smithy_eventstream::frame::UnmarshalledMessage<Self::Output, Self::Error>,
        aws_smithy_eventstream::error::Error,
    > {
        let response_headers = aws_smithy_eventstream::smithy::parse_response_headers(message)?;
        match response_headers.message_type.as_str() {
            "event" => {
                match response_headers.smithy_type.as_str() {
                    "event" => {
                        let mut builder = crate::model::CaptureEvent::builder();
                        let content_type = response_headers.content_type().unwrap_or_default();
                        if content_type != "application/octet-stream" {
                            return Err(aws_smithy_eventstream::error::Error::Unmarshalling(format!(
                                                "expected :content-type to be 'application/octet-stream', but was '{}'",
                                                content_type
                                            )));
                        }
                        builder = builder.pokedex_update(aws_smithy_types::Blob::new(
                            message.payload().as_ref(),
                        ));
                        for header in message.headers() {
                            match header.name().as_str() {
                                "name" => {
                                    builder = builder.name(
                                        aws_smithy_eventstream::smithy::expect_string(header)?,
                                    );
                                }
                                "captured" => {
                                    builder = builder.captured(
                                        aws_smithy_eventstream::smithy::expect_bool(header)?,
                                    );
                                }
                                "shiny" => {
                                    builder = builder.shiny(
                                        aws_smithy_eventstream::smithy::expect_bool(header)?,
                                    );
                                }
                                // Event stream protocol headers start with ':'
                                name => {
                                    if !name.starts_with(':') {
                                        tracing::trace!(
                                            "Unrecognized event stream message header: {}",
                                            name
                                        );
                                    }
                                }
                            }
                        }
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::CapturePokemonEvents::Event(builder.build()),
                        ))
                    }
                    _unknown_variant => {
                        Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Event(
                            crate::model::CapturePokemonEvents::Unknown,
                        ))
                    }
                }
            }
            "exception" => {
                let generic =
                    match crate::json_deser::parse_event_stream_generic_error(message.payload()) {
                        Ok(generic) => generic,
                        Err(err) => {
                            return Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                                crate::error::CapturePokemonEventsError::unhandled(err),
                            ))
                        }
                    };
                match response_headers.smithy_type.as_str() {
                    "invalid_pokeball" => {
                        let mut builder = crate::error::InvalidPokeballError::builder();
                        builder = crate::json_deser::deser_structure_crate_error_invalid_pokeball_error_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall invalid_pokeball: {}", err))
                                                            })?;
                        return Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::error::CapturePokemonEventsError::new(
                                crate::error::CapturePokemonEventsErrorKind::InvalidPokeballError(
                                    builder.build(),
                                ),
                                generic,
                            ),
                        ));
                    }
                    "throttlingError" => {
                        let mut builder = crate::error::ThrottlingError::builder();
                        builder = crate::json_deser::deser_structure_crate_error_throttling_error_json_err(&message.payload()[..], builder)
                                                            .map_err(|err| {
                                                                aws_smithy_eventstream::error::Error::Unmarshalling(format!("failed to unmarshall throttlingError: {}", err))
                                                            })?;
                        return Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                            crate::error::CapturePokemonEventsError::new(
                                crate::error::CapturePokemonEventsErrorKind::ThrottlingError(
                                    builder.build(),
                                ),
                                generic,
                            ),
                        ));
                    }
                    _ => {}
                }
                Ok(aws_smithy_eventstream::frame::UnmarshalledMessage::Error(
                    crate::error::CapturePokemonEventsError::generic(generic),
                ))
            }
            value => {
                return Err(aws_smithy_eventstream::error::Error::Unmarshalling(
                    format!("unrecognized :message-type: {}", value),
                ));
            }
        }
    }
}
