// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    InvalidPokeballError(crate::error::InvalidPokeballError),
    #[allow(missing_docs)] // documentation missing in model
    MasterBallUnsuccessful(crate::error::MasterBallUnsuccessful),
    /// Not authorized to access Pok√©mon storage.
    NotAuthorized(crate::error::NotAuthorized),
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    #[allow(missing_docs)] // documentation missing in model
    ThrottlingError(crate::error::ThrottlingError),
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedRegionError(crate::error::UnsupportedRegionError),
    /// An unhandled error occurred.
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidPokeballError(inner) => inner.fmt(f),
            Error::MasterBallUnsuccessful(inner) => inner.fmt(f),
            Error::NotAuthorized(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ThrottlingError(inner) => inner.fmt(f),
            Error::UnsupportedRegionError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CheckHealthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CheckHealthError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CheckHealthErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DoNothingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DoNothingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DoNothingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPokemonSpeciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPokemonSpeciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPokemonSpeciesErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetPokemonSpeciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServerStatisticsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServerStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetServerStatisticsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CapturePokemonError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CapturePokemonError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CapturePokemonErrorKind::InvalidPokeballError(inner) => {
                    Error::InvalidPokeballError(inner)
                }
                crate::error::CapturePokemonErrorKind::MasterBallUnsuccessful(inner) => {
                    Error::MasterBallUnsuccessful(inner)
                }
                crate::error::CapturePokemonErrorKind::UnsupportedRegionError(inner) => {
                    Error::UnsupportedRegionError(inner)
                }
                crate::error::CapturePokemonErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::CapturePokemonErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStorageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStorageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetStorageErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetStorageErrorKind::NotAuthorized(inner) => {
                    Error::NotAuthorized(inner)
                }
                crate::error::GetStorageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttemptCapturingPokemonEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttemptCapturingPokemonEventError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttemptCapturingPokemonEventErrorKind::MasterBallUnsuccessful(
                    inner,
                ) => Error::MasterBallUnsuccessful(inner),
                crate::error::AttemptCapturingPokemonEventErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CapturePokemonEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CapturePokemonEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CapturePokemonEventsErrorKind::InvalidPokeballError(inner) => {
                    Error::InvalidPokeballError(inner)
                }
                crate::error::CapturePokemonEventsErrorKind::ThrottlingError(inner) => {
                    Error::ThrottlingError(inner)
                }
                crate::error::CapturePokemonEventsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
