// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::CheckHealthInput> for Fun
where
    Fun: FnOnce(crate::input::CheckHealthInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<Output = crate::output::CheckHealthOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper = match crate::operation::CheckHealthOperationInputWrapper::from_request(
            &mut req,
        )
        .await
        {
            Ok(v) => v,
            Err(runtime_error) => {
                let response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::CheckHealthOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.CheckHealth",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::DoNothingInput> for Fun
where
    Fun: FnOnce(crate::input::DoNothingInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<Output = crate::output::DoNothingOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::DoNothingOperationInputWrapper::from_request(&mut req).await {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::DoNothingOperationOutputWrapper = output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext =
            aws_smithy_http_server::extension::OperationExtension::new("com.aws.example.DoNothing")
                .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::GetPokemonSpeciesInput>
    for Fun
where
    Fun: FnOnce(crate::input::GetPokemonSpeciesInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<
            Output = Result<
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
            >,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetPokemonSpeciesOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::GetPokemonSpeciesOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.GetPokemonSpecies",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::GetServerStatisticsInput>
    for Fun
where
    Fun: FnOnce(crate::input::GetServerStatisticsInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<Output = crate::output::GetServerStatisticsOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetServerStatisticsOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::GetServerStatisticsOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.GetServerStatistics",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::CapturePokemonInput> for Fun
where
    Fun: FnOnce(crate::input::CapturePokemonInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<
            Output = Result<crate::output::CapturePokemonOutput, crate::error::CapturePokemonError>,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B: Into<aws_smithy_http::byte_stream::ByteStream>,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::CapturePokemonOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::CapturePokemonOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.rust.CapturePokemon",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut>
    crate::server_operation_handler_trait::Handler<B, (), crate::input::GetStorageInput> for Fun
where
    Fun: FnOnce(crate::input::GetStorageInput) -> Fut + Clone + Send + 'static,
    Fut: std::future::Future<
            Output = Result<crate::output::GetStorageOutput, crate::error::GetStorageError>,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetStorageOperationInputWrapper::from_request(&mut req).await {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner).await;
        let output_wrapper: crate::operation::GetStorageOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.rust.GetStorage",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::CheckHealthInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::CheckHealthInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<Output = crate::output::CheckHealthOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper = match crate::operation::CheckHealthOperationInputWrapper::from_request(
            &mut req,
        )
        .await
        {
            Ok(v) => v,
            Err(runtime_error) => {
                let response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::CheckHealthOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.CheckHealth",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::DoNothingInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::DoNothingInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<Output = crate::output::DoNothingOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::DoNothingOperationInputWrapper::from_request(&mut req).await {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::DoNothingOperationOutputWrapper = output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext =
            aws_smithy_http_server::extension::OperationExtension::new("com.aws.example.DoNothing")
                .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::GetPokemonSpeciesInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::GetPokemonSpeciesInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<
            Output = Result<
                crate::output::GetPokemonSpeciesOutput,
                crate::error::GetPokemonSpeciesError,
            >,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetPokemonSpeciesOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::GetPokemonSpeciesOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.GetPokemonSpecies",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::GetServerStatisticsInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::GetServerStatisticsInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<Output = crate::output::GetServerStatisticsOutput> + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetServerStatisticsOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::GetServerStatisticsOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.GetServerStatistics",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::CapturePokemonInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::CapturePokemonInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<
            Output = Result<crate::output::CapturePokemonOutput, crate::error::CapturePokemonError>,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B: Into<aws_smithy_http::byte_stream::ByteStream>,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::CapturePokemonOperationInputWrapper::from_request(&mut req)
                .await
            {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::CapturePokemonOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.rust.CapturePokemon",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
#[async_trait::async_trait]
impl<B, Fun, Fut, S>
    crate::server_operation_handler_trait::Handler<
        B,
        aws_smithy_http_server::Extension<S>,
        crate::input::GetStorageInput,
    > for Fun
where
    S: Send + Clone + Sync + 'static,
    Fun: FnOnce(crate::input::GetStorageInput, aws_smithy_http_server::Extension<S>) -> Fut
        + Clone
        + Send
        + 'static,
    Fut: std::future::Future<
            Output = Result<crate::output::GetStorageOutput, crate::error::GetStorageError>,
        > + Send,
    B: aws_smithy_http_server::body::HttpBody + Send + 'static,
    B::Data: Send,
    aws_smithy_http_server::rejection::RequestRejection:
        From<<B as aws_smithy_http_server::body::HttpBody>::Error>,
{
    type Sealed = crate::server_operation_handler_trait::sealed::Hidden;
    async fn call(
        self,
        req: http::Request<B>,
    ) -> http::Response<aws_smithy_http_server::body::BoxBody> {
        let mut req = aws_smithy_http_server::request::RequestParts::new(req);
        let input_wrapper =
            match crate::operation::GetStorageOperationInputWrapper::from_request(&mut req).await {
                Ok(v) => v,
                Err(runtime_error) => {
                    let response = aws_smithy_http_server::response::IntoResponse::<
                        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                    >::into_response(runtime_error);
                    return response.map(aws_smithy_http_server::body::boxed);
                }
            };
        let state = match aws_smithy_http_server::extension::extract_extension(&mut req).await {
            Ok(v) => v,
            Err(extension_not_found_rejection) => {
                let extension = aws_smithy_http_server::extension::RuntimeErrorExtension::new(
                    extension_not_found_rejection.to_string(),
                );
                let runtime_error = aws_smithy_http_server::runtime_error::RuntimeError::from(
                    extension_not_found_rejection,
                );
                let mut response = aws_smithy_http_server::response::IntoResponse::<
                    aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
                >::into_response(runtime_error);
                response.extensions_mut().insert(extension);
                return response.map(aws_smithy_http_server::body::boxed);
            }
        };
        let input_inner = input_wrapper.into();
        let output_inner = self(input_inner, state).await;
        let output_wrapper: crate::operation::GetStorageOperationOutputWrapper =
            output_inner.into();
        let mut response = output_wrapper.into_response();
        let operation_ext = aws_smithy_http_server::extension::OperationExtension::new(
            "com.aws.example.rust.GetStorage",
        )
        .expect("malformed absolute shape ID");
        response.extensions_mut().insert(operation_ext);
        response.map(aws_smithy_http_server::body::boxed)
    }
}
