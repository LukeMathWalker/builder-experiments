// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// The service builder for [`PokemonService`].
///
/// Constructed via [`PokemonService::builder`].
pub struct PokemonServiceBuilder<
    Op1,
    Op2,
    Op3,
    Op4,
    Op5,
    Op6,
    Exts1 = (),
    Exts2 = (),
    Exts3 = (),
    Exts4 = (),
    Exts5 = (),
    Exts6 = (),
    Pl = aws_smithy_http_server::plugin::IdentityPlugin,
> {
    check_health: Op1,
    do_nothing: Op2,
    get_pokemon_species: Op3,
    get_server_statistics: Op4,
    capture_pokemon: Op5,
    get_storage: Op6,
    #[allow(unused_parens)]
    _exts: std::marker::PhantomData<(Exts1, Exts2, Exts3, Exts4, Exts5, Exts6)>,
    plugin: Pl,
}

impl<Op1, Op2, Op3, Op4, Op5, Op6, Exts1, Exts2, Exts3, Exts4, Exts5, Exts6, Pl>
    PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
{
    /// Sets the [`CheckHealth`](crate::operation_shape::CheckHealth) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn check_health<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<crate::operation_shape::CheckHealth, H>,
        >,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        NewExts,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<crate::operation_shape::CheckHealth, NewExts>,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.check_health_operation(crate::operation_shape::CheckHealth::from_handler(value))
    }

    /// Sets the [`CheckHealth`](crate::operation_shape::CheckHealth) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`CheckHealth`](crate::operation_shape::CheckHealth) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn check_health_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        NewOp,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        NewExts,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: value,
            do_nothing: self.do_nothing,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: self.capture_pokemon,
            get_storage: self.get_storage,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }

    /// Sets the [`DoNothing`](crate::operation_shape::DoNothing) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn do_nothing<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        Op1,
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<crate::operation_shape::DoNothing, H>,
        >,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        NewExts,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<crate::operation_shape::DoNothing, NewExts>,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.do_nothing_operation(crate::operation_shape::DoNothing::from_handler(value))
    }

    /// Sets the [`DoNothing`](crate::operation_shape::DoNothing) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`DoNothing`](crate::operation_shape::DoNothing) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn do_nothing_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        Op1,
        NewOp,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        NewExts,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: value,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: self.capture_pokemon,
            get_storage: self.get_storage,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }

    /// Sets the [`GetPokemonSpecies`](crate::operation_shape::GetPokemonSpecies) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn get_pokemon_species<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<
                crate::operation_shape::GetPokemonSpecies,
                H,
            >,
        >,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        NewExts,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<
            crate::operation_shape::GetPokemonSpecies,
            NewExts,
        >,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.get_pokemon_species_operation(crate::operation_shape::GetPokemonSpecies::from_handler(
            value,
        ))
    }

    /// Sets the [`GetPokemonSpecies`](crate::operation_shape::GetPokemonSpecies) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`GetPokemonSpecies`](crate::operation_shape::GetPokemonSpecies) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn get_pokemon_species_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        NewOp,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        NewExts,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: self.do_nothing,
            get_pokemon_species: value,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: self.capture_pokemon,
            get_storage: self.get_storage,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }

    /// Sets the [`GetServerStatistics`](crate::operation_shape::GetServerStatistics) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn get_server_statistics<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<
                crate::operation_shape::GetServerStatistics,
                H,
            >,
        >,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        NewExts,
        Exts5,
        Exts6,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<
            crate::operation_shape::GetServerStatistics,
            NewExts,
        >,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.get_server_statistics_operation(
            crate::operation_shape::GetServerStatistics::from_handler(value),
        )
    }

    /// Sets the [`GetServerStatistics`](crate::operation_shape::GetServerStatistics) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`GetServerStatistics`](crate::operation_shape::GetServerStatistics) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn get_server_statistics_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        NewOp,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        NewExts,
        Exts5,
        Exts6,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: self.do_nothing,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: value,
            capture_pokemon: self.capture_pokemon,
            get_storage: self.get_storage,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }

    /// Sets the [`CapturePokemon`](crate::operation_shape::CapturePokemon) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn capture_pokemon<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<
                crate::operation_shape::CapturePokemon,
                H,
            >,
        >,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        NewExts,
        Exts6,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<
            crate::operation_shape::CapturePokemon,
            NewExts,
        >,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.capture_pokemon_operation(crate::operation_shape::CapturePokemon::from_handler(value))
    }

    /// Sets the [`CapturePokemon`](crate::operation_shape::CapturePokemon) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`CapturePokemon`](crate::operation_shape::CapturePokemon) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn capture_pokemon_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        NewOp,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        NewExts,
        Exts6,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: self.do_nothing,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: value,
            get_storage: self.get_storage,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }

    /// Sets the [`GetStorage`](crate::operation_shape::GetStorage) operation.
    ///
    /// This should be a closure satisfying the [`Handler`](aws_smithy_http_server::operation::Handler) trait.
    /// See the [operation module documentation](aws_smithy_http_server::operation) for more information.
    pub fn get_storage<H, NewExts>(
        self,
        value: H,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        aws_smithy_http_server::operation::Operation<
            aws_smithy_http_server::operation::IntoService<crate::operation_shape::GetStorage, H>,
        >,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        NewExts,
        Pl,
    >
    where
        H: aws_smithy_http_server::operation::Handler<crate::operation_shape::GetStorage, NewExts>,
    {
        use aws_smithy_http_server::operation::OperationShapeExt;
        self.get_storage_operation(crate::operation_shape::GetStorage::from_handler(value))
    }

    /// Sets the [`GetStorage`](crate::operation_shape::GetStorage) operation.
    ///
    /// This should be an [`Operation`](aws_smithy_http_server::operation::Operation) created from
    /// [`GetStorage`](crate::operation_shape::GetStorage) using either
    /// [`OperationShape::from_handler`](aws_smithy_http_server::operation::OperationShapeExt::from_handler) or
    /// [`OperationShape::from_service`](aws_smithy_http_server::operation::OperationShapeExt::from_service).
    pub fn get_storage_operation<NewOp, NewExts>(
        self,
        value: NewOp,
    ) -> PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        NewOp,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        NewExts,
        Pl,
    > {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: self.do_nothing,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: self.capture_pokemon,
            get_storage: value,
            _exts: std::marker::PhantomData,
            plugin: self.plugin,
        }
    }
}

impl<Op1, Op2, Op3, Op4, Op5, Op6, Exts1, Exts2, Exts3, Exts4, Exts5, Exts6, Pl>
    PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
{
    /// Constructs a [`PokemonService`] from the arguments provided to the builder.
    pub fn build<B>(self) -> PokemonService<aws_smithy_http_server::routing::Route<B>>
    where
        Op1: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::CheckHealth,
            Exts1,
            B,
            Pl,
        >,
        Op1::Service: Clone + Send + 'static,
        <Op1::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op1::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
        Op2: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::DoNothing,
            Exts2,
            B,
            Pl,
        >,
        Op2::Service: Clone + Send + 'static,
        <Op2::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op2::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
        Op3: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::GetPokemonSpecies,
            Exts3,
            B,
            Pl,
        >,
        Op3::Service: Clone + Send + 'static,
        <Op3::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op3::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
        Op4: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::GetServerStatistics,
            Exts4,
            B,
            Pl,
        >,
        Op4::Service: Clone + Send + 'static,
        <Op4::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op4::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
        Op5: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::CapturePokemon,
            Exts5,
            B,
            Pl,
        >,
        Op5::Service: Clone + Send + 'static,
        <Op5::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op5::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
        Op6: aws_smithy_http_server::operation::Upgradable<
            aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
            crate::operation_shape::GetStorage,
            Exts6,
            B,
            Pl,
        >,
        Op6::Service: Clone + Send + 'static,
        <Op6::Service as tower::Service<http::Request<B>>>::Future: Send + 'static,

        Op6::Service: tower::Service<http::Request<B>, Error = std::convert::Infallible>,
    {
        let router = aws_smithy_http_server::proto::rest::router::RestRouter::from_iter([(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::GET,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("ping")),
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.check_health.upgrade(&self.plugin))
                ),
(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::GET,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("do-nothing")),
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.do_nothing.upgrade(&self.plugin))
                ),
(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::GET,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("pokemon-species")),
    aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.get_pokemon_species.upgrade(&self.plugin))
                ),
(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::GET,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("stats")),
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.get_server_statistics.upgrade(&self.plugin))
                ),
(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::POST,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("capture-pokemon-event")),
    aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.capture_pokemon.upgrade(&self.plugin))
                ),
(
                    aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    http::Method::GET,
                    aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("pokedex")),
    aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                ),
                    aws_smithy_http_server::routing::Route::new(self.get_storage.upgrade(&self.plugin))
                ),]);
        PokemonService {
            router: aws_smithy_http_server::routers::RoutingService::new(router),
        }
    }
}

impl<Op1, Op2, Op3, Op4, Op5, Op6, Exts1, Exts2, Exts3, Exts4, Exts5, Exts6, Pl, NewPl>
    aws_smithy_http_server::plugin::Pluggable<NewPl>
    for PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        Pl,
    >
{
    type Output = PokemonServiceBuilder<
        Op1,
        Op2,
        Op3,
        Op4,
        Op5,
        Op6,
        Exts1,
        Exts2,
        Exts3,
        Exts4,
        Exts5,
        Exts6,
        aws_smithy_http_server::plugin::PluginStack<Pl, NewPl>,
    >;
    fn apply(self, plugin: NewPl) -> Self::Output {
        PokemonServiceBuilder {
            check_health: self.check_health,
            do_nothing: self.do_nothing,
            get_pokemon_species: self.get_pokemon_species,
            get_server_statistics: self.get_server_statistics,
            capture_pokemon: self.capture_pokemon,
            get_storage: self.get_storage,
            _exts: self._exts,
            plugin: aws_smithy_http_server::plugin::PluginStack::new(self.plugin, plugin),
        }
    }
}

/// The Pokémon Service allows you to retrieve information about Pokémon species.
#[derive(Clone)]
pub struct PokemonService<S> {
    router: aws_smithy_http_server::routers::RoutingService<
        aws_smithy_http_server::proto::rest::router::RestRouter<S>,
        aws_smithy_http_server::proto::rest_json_1::AwsRestJson1,
    >,
}

impl PokemonService<()> {
    /// Constructs a builder for [`PokemonService`].
    pub fn builder() -> PokemonServiceBuilder<
        aws_smithy_http_server::operation::MissingOperation,
        aws_smithy_http_server::operation::MissingOperation,
        aws_smithy_http_server::operation::MissingOperation,
        aws_smithy_http_server::operation::MissingOperation,
        aws_smithy_http_server::operation::MissingOperation,
        aws_smithy_http_server::operation::MissingOperation,
    > {
        PokemonServiceBuilder {
            check_health: aws_smithy_http_server::operation::MissingOperation,
            do_nothing: aws_smithy_http_server::operation::MissingOperation,
            get_pokemon_species: aws_smithy_http_server::operation::MissingOperation,
            get_server_statistics: aws_smithy_http_server::operation::MissingOperation,
            capture_pokemon: aws_smithy_http_server::operation::MissingOperation,
            get_storage: aws_smithy_http_server::operation::MissingOperation,
            _exts: std::marker::PhantomData,
            plugin: aws_smithy_http_server::plugin::IdentityPlugin,
        }
    }

    /// Constructs an unchecked builder for [`PokemonService`].
    ///
    /// This will not enforce that all operations are set, however if an unset operation is used at runtime
    /// it will return status code 500 and log an error.
    pub fn unchecked_builder() -> PokemonServiceBuilder<
        aws_smithy_http_server::operation::FailOnMissingOperation,
        aws_smithy_http_server::operation::FailOnMissingOperation,
        aws_smithy_http_server::operation::FailOnMissingOperation,
        aws_smithy_http_server::operation::FailOnMissingOperation,
        aws_smithy_http_server::operation::FailOnMissingOperation,
        aws_smithy_http_server::operation::FailOnMissingOperation,
    > {
        PokemonServiceBuilder {
            check_health: aws_smithy_http_server::operation::FailOnMissingOperation,
            do_nothing: aws_smithy_http_server::operation::FailOnMissingOperation,
            get_pokemon_species: aws_smithy_http_server::operation::FailOnMissingOperation,
            get_server_statistics: aws_smithy_http_server::operation::FailOnMissingOperation,
            capture_pokemon: aws_smithy_http_server::operation::FailOnMissingOperation,
            get_storage: aws_smithy_http_server::operation::FailOnMissingOperation,
            _exts: std::marker::PhantomData,
            plugin: aws_smithy_http_server::plugin::IdentityPlugin,
        }
    }
}

impl<S> PokemonService<S> {
    /// Converts [`PokemonService`] into a [`MakeService`](tower::make::MakeService).
    pub fn into_make_service(self) -> aws_smithy_http_server::routing::IntoMakeService<Self> {
        aws_smithy_http_server::routing::IntoMakeService::new(self)
    }

    /// Applies a layer uniformly to all routes.
    pub fn layer<L>(self, layer: &L) -> PokemonService<L::Service>
    where
        L: tower::Layer<S>,
    {
        PokemonService {
            router: self.router.map(|s| s.layer(layer)),
        }
    }
}

impl<B, RespB, S> tower::Service<http::Request<B>> for PokemonService<S>
where
    S: tower::Service<http::Request<B>, Response = http::Response<RespB>> + Clone,
    RespB: http_body::Body<Data = bytes::Bytes> + Send + 'static,
    RespB::Error: Into<Box<dyn std::error::Error + Send + Sync>>,
{
    type Response = http::Response<aws_smithy_http_server::body::BoxBody>;
    type Error = S::Error;
    type Future = aws_smithy_http_server::routers::RoutingFuture<S, B>;

    fn poll_ready(
        &mut self,
        cx: &mut std::task::Context,
    ) -> std::task::Poll<Result<(), Self::Error>> {
        self.router.poll_ready(cx)
    }

    fn call(&mut self, request: http::Request<B>) -> Self::Future {
        self.router.call(request)
    }
}
