// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A request to access PokÃ©mon storage.
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetStorageInput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub user: std::string::String,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub passcode: std::string::String,
}
impl GetStorageInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn user(&self) -> &str {
        use std::ops::Deref;
        self.user.deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn passcode(&self) -> &str {
        use std::ops::Deref;
        self.passcode.deref()
    }
}
impl std::fmt::Debug for GetStorageInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetStorageInput");
        formatter.field("user", &self.user);
        formatter.field("passcode", &self.passcode);
        formatter.finish()
    }
}
/// See [`GetStorageInput`](crate::input::GetStorageInput).
pub mod get_storage_input {

    /// A builder for [`GetStorageInput`](crate::input::GetStorageInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user: std::option::Option<std::string::String>,
        pub(crate) passcode: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn user(mut self, input: impl Into<std::string::String>) -> Self {
            self.user = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_user(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn passcode(mut self, input: impl Into<std::string::String>) -> Self {
            self.passcode = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_passcode(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.passcode = input;
            self
        }
        /// Consumes the builder and constructs a [`GetStorageInput`](crate::input::GetStorageInput).
        pub fn build(
            self,
        ) -> Result<crate::input::GetStorageInput, aws_smithy_http::operation::BuildError> {
            Ok(crate::input::GetStorageInput {
                user: self.user.unwrap_or_default(),
                passcode: self.passcode.unwrap_or_default(),
            })
        }
    }
}
impl GetStorageInput {
    /// Creates a new builder-style object to manufacture [`GetStorageInput`](crate::input::GetStorageInput).
    pub fn builder() -> crate::input::get_storage_input::Builder {
        crate::input::get_storage_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPokemonSpeciesInput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub name: std::string::String,
}
impl GetPokemonSpeciesInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
}
impl std::fmt::Debug for GetPokemonSpeciesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPokemonSpeciesInput");
        formatter.field("name", &self.name);
        formatter.finish()
    }
}
/// See [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
pub mod get_pokemon_species_input {

    /// A builder for [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
        pub fn build(
            self,
        ) -> Result<crate::input::GetPokemonSpeciesInput, aws_smithy_http::operation::BuildError>
        {
            Ok(crate::input::GetPokemonSpeciesInput {
                name: self.name.unwrap_or_default(),
            })
        }
    }
}
impl GetPokemonSpeciesInput {
    /// Creates a new builder-style object to manufacture [`GetPokemonSpeciesInput`](crate::input::GetPokemonSpeciesInput).
    pub fn builder() -> crate::input::get_pokemon_species_input::Builder {
        crate::input::get_pokemon_species_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CheckHealthInput {}
impl std::fmt::Debug for CheckHealthInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CheckHealthInput");
        formatter.finish()
    }
}
/// See [`CheckHealthInput`](crate::input::CheckHealthInput).
pub mod check_health_input {

    /// A builder for [`CheckHealthInput`](crate::input::CheckHealthInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CheckHealthInput`](crate::input::CheckHealthInput).
        pub fn build(
            self,
        ) -> Result<crate::input::CheckHealthInput, aws_smithy_http::operation::BuildError>
        {
            Ok(crate::input::CheckHealthInput {})
        }
    }
}
impl CheckHealthInput {
    /// Creates a new builder-style object to manufacture [`CheckHealthInput`](crate::input::CheckHealthInput).
    pub fn builder() -> crate::input::check_health_input::Builder {
        crate::input::check_health_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
pub struct CapturePokemonInput {
    #[allow(missing_docs)] // documentation missing in model
    pub events: aws_smithy_http::event_stream::Receiver<
        crate::model::AttemptCapturingPokemonEvent,
        crate::error::AttemptCapturingPokemonEventError,
    >,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub region: std::string::String,
}
impl CapturePokemonInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn events(
        &self,
    ) -> &aws_smithy_http::event_stream::Receiver<
        crate::model::AttemptCapturingPokemonEvent,
        crate::error::AttemptCapturingPokemonEventError,
    > {
        &self.events
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
}
impl std::fmt::Debug for CapturePokemonInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CapturePokemonInput");
        formatter.field("events", &self.events);
        formatter.field("region", &self.region);
        formatter.finish()
    }
}
/// See [`CapturePokemonInput`](crate::input::CapturePokemonInput).
pub mod capture_pokemon_input {

    /// A builder for [`CapturePokemonInput`](crate::input::CapturePokemonInput).
    #[derive(std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) events: std::option::Option<
            aws_smithy_http::event_stream::Receiver<
                crate::model::AttemptCapturingPokemonEvent,
                crate::error::AttemptCapturingPokemonEventError,
            >,
        >,
        pub(crate) region: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn events(
            mut self,
            input: aws_smithy_http::event_stream::Receiver<
                crate::model::AttemptCapturingPokemonEvent,
                crate::error::AttemptCapturingPokemonEventError,
            >,
        ) -> Self {
            self.events = Some(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_events(
            mut self,
            input: std::option::Option<
                aws_smithy_http::event_stream::Receiver<
                    crate::model::AttemptCapturingPokemonEvent,
                    crate::error::AttemptCapturingPokemonEventError,
                >,
            >,
        ) -> Self {
            self.events = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
            self.region = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.region = input;
            self
        }
        /// Consumes the builder and constructs a [`CapturePokemonInput`](crate::input::CapturePokemonInput).
        pub fn build(
            self,
        ) -> Result<crate::input::CapturePokemonInput, aws_smithy_http::operation::BuildError>
        {
            Ok(
                crate::input::CapturePokemonInput {
                    events: self.events
                        .ok_or(
                            aws_smithy_http::operation::BuildError::MissingField { field: "events", details: "events was not specified but it is required when building CapturePokemonInput" }
                        )?
                    ,
                    region: self.region
                        .unwrap_or_default()
                    ,
                }
            )
        }
    }
}
impl CapturePokemonInput {
    /// Creates a new builder-style object to manufacture [`CapturePokemonInput`](crate::input::CapturePokemonInput).
    pub fn builder() -> crate::input::capture_pokemon_input::Builder {
        crate::input::capture_pokemon_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DoNothingInput {}
impl std::fmt::Debug for DoNothingInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DoNothingInput");
        formatter.finish()
    }
}
/// See [`DoNothingInput`](crate::input::DoNothingInput).
pub mod do_nothing_input {

    /// A builder for [`DoNothingInput`](crate::input::DoNothingInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DoNothingInput`](crate::input::DoNothingInput).
        pub fn build(
            self,
        ) -> Result<crate::input::DoNothingInput, aws_smithy_http::operation::BuildError> {
            Ok(crate::input::DoNothingInput {})
        }
    }
}
impl DoNothingInput {
    /// Creates a new builder-style object to manufacture [`DoNothingInput`](crate::input::DoNothingInput).
    pub fn builder() -> crate::input::do_nothing_input::Builder {
        crate::input::do_nothing_input::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServerStatisticsInput {}
impl std::fmt::Debug for GetServerStatisticsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServerStatisticsInput");
        formatter.finish()
    }
}
/// See [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
pub mod get_server_statistics_input {

    /// A builder for [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
        pub fn build(
            self,
        ) -> Result<crate::input::GetServerStatisticsInput, aws_smithy_http::operation::BuildError>
        {
            Ok(crate::input::GetServerStatisticsInput {})
        }
    }
}
impl GetServerStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetServerStatisticsInput`](crate::input::GetServerStatisticsInput).
    pub fn builder() -> crate::input::get_server_statistics_input::Builder {
        crate::input::get_server_statistics_input::Builder::default()
    }
}
