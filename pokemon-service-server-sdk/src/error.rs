// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Not authorized to access Pok√©mon storage.
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotAuthorized {}
impl std::fmt::Debug for NotAuthorized {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotAuthorized");
        formatter.finish()
    }
}
impl NotAuthorized {
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "NotAuthorized"
    }
}
impl std::fmt::Display for NotAuthorized {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "NotAuthorized")?;
        Ok(())
    }
}
impl std::error::Error for NotAuthorized {}
/// See [`NotAuthorized`](crate::error::NotAuthorized).
pub mod not_authorized {

    /// A builder for [`NotAuthorized`](crate::error::NotAuthorized).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NotAuthorized`](crate::error::NotAuthorized).
        pub fn build(self) -> crate::error::NotAuthorized {
            crate::error::NotAuthorized {}
        }
    }
}
impl NotAuthorized {
    /// Creates a new builder-style object to manufacture [`NotAuthorized`](crate::error::NotAuthorized).
    pub fn builder() -> crate::error::not_authorized::Builder {
        crate::error::not_authorized::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::string::String,
}
impl std::fmt::Debug for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundException {
    /// Returns the error message.
    pub fn message(&self) -> &str {
        self.message.as_ref()
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "ResourceNotFoundException"
    }
}
impl std::fmt::Display for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundException")?;
        write!(f, ": {}", &self.message)?;
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundException {}
/// See [`ResourceNotFoundException`](crate::error::ResourceNotFoundException).
pub mod resource_not_found_exception {

    /// A builder for [`ResourceNotFoundException`](crate::error::ResourceNotFoundException).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundException`](crate::error::ResourceNotFoundException).
        pub fn build(self) -> crate::error::ResourceNotFoundException {
            crate::error::ResourceNotFoundException {
                message: self.message.unwrap_or_default(),
            }
        }
    }
}
impl ResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundException`](crate::error::ResourceNotFoundException).
    pub fn builder() -> crate::error::resource_not_found_exception::Builder {
        crate::error::resource_not_found_exception::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ThrottlingError {}
impl std::fmt::Debug for ThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ThrottlingError");
        formatter.finish()
    }
}
impl ThrottlingError {
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "ThrottlingError"
    }
}
impl std::fmt::Display for ThrottlingError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ThrottlingError")?;
        Ok(())
    }
}
impl std::error::Error for ThrottlingError {}
/// See [`ThrottlingError`](crate::error::ThrottlingError).
pub mod throttling_error {

    /// A builder for [`ThrottlingError`](crate::error::ThrottlingError).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ThrottlingError`](crate::error::ThrottlingError).
        pub fn build(self) -> crate::error::ThrottlingError {
            crate::error::ThrottlingError {}
        }
    }
}
impl ThrottlingError {
    /// Creates a new builder-style object to manufacture [`ThrottlingError`](crate::error::ThrottlingError).
    pub fn builder() -> crate::error::throttling_error::Builder {
        crate::error::throttling_error::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsupportedRegionError {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub region: std::string::String,
}
impl UnsupportedRegionError {
    #[allow(missing_docs)] // documentation missing in model
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
}
impl std::fmt::Debug for UnsupportedRegionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsupportedRegionError");
        formatter.field("region", &self.region);
        formatter.finish()
    }
}
impl UnsupportedRegionError {
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "UnsupportedRegionError"
    }
}
impl std::fmt::Display for UnsupportedRegionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedRegionError")?;
        Ok(())
    }
}
impl std::error::Error for UnsupportedRegionError {}
/// See [`UnsupportedRegionError`](crate::error::UnsupportedRegionError).
pub mod unsupported_region_error {

    /// A builder for [`UnsupportedRegionError`](crate::error::UnsupportedRegionError).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) region: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
            self.region = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.region = input;
            self
        }
        /// Consumes the builder and constructs a [`UnsupportedRegionError`](crate::error::UnsupportedRegionError).
        pub fn build(self) -> crate::error::UnsupportedRegionError {
            crate::error::UnsupportedRegionError {
                region: self.region.unwrap_or_default(),
            }
        }
    }
}
impl UnsupportedRegionError {
    /// Creates a new builder-style object to manufacture [`UnsupportedRegionError`](crate::error::UnsupportedRegionError).
    pub fn builder() -> crate::error::unsupported_region_error::Builder {
        crate::error::unsupported_region_error::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MasterBallUnsuccessful {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::string::String,
}
impl std::fmt::Debug for MasterBallUnsuccessful {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MasterBallUnsuccessful");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl MasterBallUnsuccessful {
    /// Returns the error message.
    pub fn message(&self) -> &str {
        self.message.as_ref()
    }
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "MasterBallUnsuccessful"
    }
}
impl std::fmt::Display for MasterBallUnsuccessful {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MasterBallUnsuccessful")?;
        write!(f, ": {}", &self.message)?;
        Ok(())
    }
}
impl std::error::Error for MasterBallUnsuccessful {}
/// See [`MasterBallUnsuccessful`](crate::error::MasterBallUnsuccessful).
pub mod master_ball_unsuccessful {

    /// A builder for [`MasterBallUnsuccessful`](crate::error::MasterBallUnsuccessful).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`MasterBallUnsuccessful`](crate::error::MasterBallUnsuccessful).
        pub fn build(self) -> crate::error::MasterBallUnsuccessful {
            crate::error::MasterBallUnsuccessful {
                message: self.message.unwrap_or_default(),
            }
        }
    }
}
impl MasterBallUnsuccessful {
    /// Creates a new builder-style object to manufacture [`MasterBallUnsuccessful`](crate::error::MasterBallUnsuccessful).
    pub fn builder() -> crate::error::master_ball_unsuccessful::Builder {
        crate::error::master_ball_unsuccessful::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidPokeballError {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub pokeball: std::string::String,
}
impl InvalidPokeballError {
    #[allow(missing_docs)] // documentation missing in model
    pub fn pokeball(&self) -> &str {
        use std::ops::Deref;
        self.pokeball.deref()
    }
}
impl std::fmt::Debug for InvalidPokeballError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidPokeballError");
        formatter.field("pokeball", &self.pokeball);
        formatter.finish()
    }
}
impl InvalidPokeballError {
    #[doc(hidden)]
    /// Returns the error name.
    pub fn name(&self) -> &'static str {
        "InvalidPokeballError"
    }
}
impl std::fmt::Display for InvalidPokeballError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidPokeballError")?;
        Ok(())
    }
}
impl std::error::Error for InvalidPokeballError {}
/// See [`InvalidPokeballError`](crate::error::InvalidPokeballError).
pub mod invalid_pokeball_error {

    /// A builder for [`InvalidPokeballError`](crate::error::InvalidPokeballError).
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pokeball: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn pokeball(mut self, input: impl Into<std::string::String>) -> Self {
            self.pokeball = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_pokeball(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.pokeball = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidPokeballError`](crate::error::InvalidPokeballError).
        pub fn build(self) -> crate::error::InvalidPokeballError {
            crate::error::InvalidPokeballError {
                pokeball: self.pokeball.unwrap_or_default(),
            }
        }
    }
}
impl InvalidPokeballError {
    /// Creates a new builder-style object to manufacture [`InvalidPokeballError`](crate::error::InvalidPokeballError).
    pub fn builder() -> crate::error::invalid_pokeball_error::Builder {
        crate::error::invalid_pokeball_error::Builder::default()
    }
}

/// Error type for the `AttemptCapturingPokemonEvent` operation.
/// Each variant represents an error that can occur for the `AttemptCapturingPokemonEvent` operation.
#[derive(std::fmt::Debug)]
pub enum AttemptCapturingPokemonEventError {
    #[allow(missing_docs)] // documentation missing in model
    MasterBallUnsuccessful(crate::error::MasterBallUnsuccessful),
}
impl std::fmt::Display for AttemptCapturingPokemonEventError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            AttemptCapturingPokemonEventError::MasterBallUnsuccessful(_inner) => _inner.fmt(f),
        }
    }
}
impl AttemptCapturingPokemonEventError {
    /// Returns `true` if the error kind is `AttemptCapturingPokemonEventError::MasterBallUnsuccessful`.
    pub fn is_master_ball_unsuccessful(&self) -> bool {
        matches!(
            &self,
            AttemptCapturingPokemonEventError::MasterBallUnsuccessful(_)
        )
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            AttemptCapturingPokemonEventError::MasterBallUnsuccessful(_inner) => _inner.name(),
        }
    }
}
impl std::error::Error for AttemptCapturingPokemonEventError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            AttemptCapturingPokemonEventError::MasterBallUnsuccessful(_inner) => Some(_inner),
        }
    }
}
impl std::convert::From<crate::error::MasterBallUnsuccessful>
    for crate::error::AttemptCapturingPokemonEventError
{
    fn from(
        variant: crate::error::MasterBallUnsuccessful,
    ) -> crate::error::AttemptCapturingPokemonEventError {
        Self::MasterBallUnsuccessful(variant)
    }
}

/// Error type for the `GetPokemonSpecies` operation.
/// Each variant represents an error that can occur for the `GetPokemonSpecies` operation.
#[derive(std::fmt::Debug)]
pub enum GetPokemonSpeciesError {
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
}
impl std::fmt::Display for GetPokemonSpeciesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            GetPokemonSpeciesError::ResourceNotFoundException(_inner) => _inner.fmt(f),
        }
    }
}
impl GetPokemonSpeciesError {
    /// Returns `true` if the error kind is `GetPokemonSpeciesError::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(&self, GetPokemonSpeciesError::ResourceNotFoundException(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            GetPokemonSpeciesError::ResourceNotFoundException(_inner) => _inner.name(),
        }
    }
}
impl std::error::Error for GetPokemonSpeciesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            GetPokemonSpeciesError::ResourceNotFoundException(_inner) => Some(_inner),
        }
    }
}
impl std::convert::From<crate::error::ResourceNotFoundException>
    for crate::error::GetPokemonSpeciesError
{
    fn from(
        variant: crate::error::ResourceNotFoundException,
    ) -> crate::error::GetPokemonSpeciesError {
        Self::ResourceNotFoundException(variant)
    }
}

/// Error type for the `CapturePokemon` operation.
/// Each variant represents an error that can occur for the `CapturePokemon` operation.
#[derive(std::fmt::Debug)]
pub enum CapturePokemonError {
    #[allow(missing_docs)] // documentation missing in model
    InvalidPokeballError(crate::error::InvalidPokeballError),
    #[allow(missing_docs)] // documentation missing in model
    MasterBallUnsuccessful(crate::error::MasterBallUnsuccessful),
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedRegionError(crate::error::UnsupportedRegionError),
    #[allow(missing_docs)] // documentation missing in model
    ThrottlingError(crate::error::ThrottlingError),
}
impl std::fmt::Display for CapturePokemonError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            CapturePokemonError::InvalidPokeballError(_inner) => _inner.fmt(f),
            CapturePokemonError::MasterBallUnsuccessful(_inner) => _inner.fmt(f),
            CapturePokemonError::UnsupportedRegionError(_inner) => _inner.fmt(f),
            CapturePokemonError::ThrottlingError(_inner) => _inner.fmt(f),
        }
    }
}
impl CapturePokemonError {
    /// Returns `true` if the error kind is `CapturePokemonError::InvalidPokeballError`.
    pub fn is_invalid_pokeball_error(&self) -> bool {
        matches!(&self, CapturePokemonError::InvalidPokeballError(_))
    }
    /// Returns `true` if the error kind is `CapturePokemonError::MasterBallUnsuccessful`.
    pub fn is_master_ball_unsuccessful(&self) -> bool {
        matches!(&self, CapturePokemonError::MasterBallUnsuccessful(_))
    }
    /// Returns `true` if the error kind is `CapturePokemonError::UnsupportedRegionError`.
    pub fn is_unsupported_region_error(&self) -> bool {
        matches!(&self, CapturePokemonError::UnsupportedRegionError(_))
    }
    /// Returns `true` if the error kind is `CapturePokemonError::ThrottlingError`.
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self, CapturePokemonError::ThrottlingError(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            CapturePokemonError::InvalidPokeballError(_inner) => _inner.name(),
            CapturePokemonError::MasterBallUnsuccessful(_inner) => _inner.name(),
            CapturePokemonError::UnsupportedRegionError(_inner) => _inner.name(),
            CapturePokemonError::ThrottlingError(_inner) => _inner.name(),
        }
    }
}
impl std::error::Error for CapturePokemonError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            CapturePokemonError::InvalidPokeballError(_inner) => Some(_inner),
            CapturePokemonError::MasterBallUnsuccessful(_inner) => Some(_inner),
            CapturePokemonError::UnsupportedRegionError(_inner) => Some(_inner),
            CapturePokemonError::ThrottlingError(_inner) => Some(_inner),
        }
    }
}
impl std::convert::From<crate::error::InvalidPokeballError> for crate::error::CapturePokemonError {
    fn from(variant: crate::error::InvalidPokeballError) -> crate::error::CapturePokemonError {
        Self::InvalidPokeballError(variant)
    }
}
impl std::convert::From<crate::error::MasterBallUnsuccessful>
    for crate::error::CapturePokemonError
{
    fn from(variant: crate::error::MasterBallUnsuccessful) -> crate::error::CapturePokemonError {
        Self::MasterBallUnsuccessful(variant)
    }
}
impl std::convert::From<crate::error::UnsupportedRegionError>
    for crate::error::CapturePokemonError
{
    fn from(variant: crate::error::UnsupportedRegionError) -> crate::error::CapturePokemonError {
        Self::UnsupportedRegionError(variant)
    }
}
impl std::convert::From<crate::error::ThrottlingError> for crate::error::CapturePokemonError {
    fn from(variant: crate::error::ThrottlingError) -> crate::error::CapturePokemonError {
        Self::ThrottlingError(variant)
    }
}

/// Error type for the `GetStorage` operation.
/// Each variant represents an error that can occur for the `GetStorage` operation.
#[derive(std::fmt::Debug)]
pub enum GetStorageError {
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// Not authorized to access Pok√©mon storage.
    NotAuthorized(crate::error::NotAuthorized),
}
impl std::fmt::Display for GetStorageError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            GetStorageError::ResourceNotFoundException(_inner) => _inner.fmt(f),
            GetStorageError::NotAuthorized(_inner) => _inner.fmt(f),
        }
    }
}
impl GetStorageError {
    /// Returns `true` if the error kind is `GetStorageError::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(&self, GetStorageError::ResourceNotFoundException(_))
    }
    /// Returns `true` if the error kind is `GetStorageError::NotAuthorized`.
    pub fn is_not_authorized(&self) -> bool {
        matches!(&self, GetStorageError::NotAuthorized(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            GetStorageError::ResourceNotFoundException(_inner) => _inner.name(),
            GetStorageError::NotAuthorized(_inner) => _inner.name(),
        }
    }
}
impl std::error::Error for GetStorageError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            GetStorageError::ResourceNotFoundException(_inner) => Some(_inner),
            GetStorageError::NotAuthorized(_inner) => Some(_inner),
        }
    }
}
impl std::convert::From<crate::error::ResourceNotFoundException> for crate::error::GetStorageError {
    fn from(variant: crate::error::ResourceNotFoundException) -> crate::error::GetStorageError {
        Self::ResourceNotFoundException(variant)
    }
}
impl std::convert::From<crate::error::NotAuthorized> for crate::error::GetStorageError {
    fn from(variant: crate::error::NotAuthorized) -> crate::error::GetStorageError {
        Self::NotAuthorized(variant)
    }
}

/// Error type for the `CapturePokemonEvents` operation.
/// Each variant represents an error that can occur for the `CapturePokemonEvents` operation.
#[derive(std::fmt::Debug)]
pub enum CapturePokemonEventsError {
    #[allow(missing_docs)] // documentation missing in model
    InvalidPokeballError(crate::error::InvalidPokeballError),
    #[allow(missing_docs)] // documentation missing in model
    ThrottlingError(crate::error::ThrottlingError),
}
impl std::fmt::Display for CapturePokemonEventsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            CapturePokemonEventsError::InvalidPokeballError(_inner) => _inner.fmt(f),
            CapturePokemonEventsError::ThrottlingError(_inner) => _inner.fmt(f),
        }
    }
}
impl CapturePokemonEventsError {
    /// Returns `true` if the error kind is `CapturePokemonEventsError::InvalidPokeballError`.
    pub fn is_invalid_pokeball_error(&self) -> bool {
        matches!(&self, CapturePokemonEventsError::InvalidPokeballError(_))
    }
    /// Returns `true` if the error kind is `CapturePokemonEventsError::ThrottlingError`.
    pub fn is_throttling_error(&self) -> bool {
        matches!(&self, CapturePokemonEventsError::ThrottlingError(_))
    }
    /// Returns the error name string by matching the correct variant.
    pub fn name(&self) -> &'static str {
        match &self {
            CapturePokemonEventsError::InvalidPokeballError(_inner) => _inner.name(),
            CapturePokemonEventsError::ThrottlingError(_inner) => _inner.name(),
        }
    }
}
impl std::error::Error for CapturePokemonEventsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            CapturePokemonEventsError::InvalidPokeballError(_inner) => Some(_inner),
            CapturePokemonEventsError::ThrottlingError(_inner) => Some(_inner),
        }
    }
}
impl std::convert::From<crate::error::InvalidPokeballError>
    for crate::error::CapturePokemonEventsError
{
    fn from(
        variant: crate::error::InvalidPokeballError,
    ) -> crate::error::CapturePokemonEventsError {
        Self::InvalidPokeballError(variant)
    }
}
impl std::convert::From<crate::error::ThrottlingError> for crate::error::CapturePokemonEventsError {
    fn from(variant: crate::error::ThrottlingError) -> crate::error::CapturePokemonEventsError {
        Self::ThrottlingError(variant)
    }
}
