// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::tabs_in_doc_comments)]
/// The `OperationRegistry` is the place where you can register
/// your service's operation implementations.
///
/// Use [`OperationRegistryBuilder`] to construct the
/// `OperationRegistry`. For each of the [operations] modeled in
/// your Smithy service, you need to provide an implementation in the
/// form of a Rust async function or closure that takes in the
/// operation's input as their first parameter, and returns the
/// operation's output. If your operation is fallible (i.e. it
/// contains the `errors` member in your Smithy model), the function
/// implementing the operation has to be fallible (i.e. return a
/// [`Result`]). **You must register an implementation for all
/// operations with the correct signature**, or your application
/// will fail to compile.
///
/// The operation registry can be converted into an [`aws_smithy_http_server::routing::Router`] for
/// your service. This router will take care of routing HTTP
/// requests to the matching operation implementation, adhering to
/// your service's protocol and the [HTTP binding traits] that you
/// used in your Smithy model. This router can be converted into a
/// type implementing [`tower::make::MakeService`], a _service
/// factory_. You can feed this value to a [Hyper server], and the
/// server will instantiate and [`serve`] your service.
///
/// Here's a full example to get you started:
///
/// ```rust
/// use std::net::SocketAddr;
/// use pokemon_service_server_sdk::{input, output, error};
/// use pokemon_service_server_sdk::operation_registry::OperationRegistryBuilder;
/// use aws_smithy_http_server::routing::Router;
///
/// #[tokio::main]
/// pub async fn main() {
///    let app: Router = OperationRegistryBuilder::default()
///        .check_health(check_health)
///        .do_nothing(do_nothing)
///        .get_pokemon_species(get_pokemon_species)
///        .get_server_statistics(get_server_statistics)
///        .capture_pokemon(capture_pokemon)
///        .get_storage(get_storage)
///        .build()
///        .expect("unable to build operation registry")
///        .into();
///
///    let bind: SocketAddr = format!("{}:{}", "127.0.0.1", "6969")
///        .parse()
///        .expect("unable to parse the server bind address and port");
///
///    let server = hyper::Server::bind(&bind).serve(app.into_make_service());
///
///    // Run your service!
///    // if let Err(err) = server.await {
///    //   eprintln!("server error: {}", err);
///    // }
/// }
///
/// /// Health check operation, to check the service is up
/// /// Not yet a deep check
/// async fn check_health(input: input::CheckHealthInput) -> output::CheckHealthOutput {
///     todo!()
/// }
///
/// /// DoNothing operation, used to stress test the framework.
/// async fn do_nothing(input: input::DoNothingInput) -> output::DoNothingOutput {
///     todo!()
/// }
///
/// /// Retrieve information about a Pokémon species.
/// async fn get_pokemon_species(input: input::GetPokemonSpeciesInput) -> Result<output::GetPokemonSpeciesOutput, error::GetPokemonSpeciesError> {
///     todo!()
/// }
///
/// /// Retrieve HTTP server statistiscs, such as calls count.
/// async fn get_server_statistics(input: input::GetServerStatisticsInput) -> output::GetServerStatisticsOutput {
///     todo!()
/// }
///
/// /// Capture Pokémons via event streams.
/// async fn capture_pokemon(input: input::CapturePokemonInput) -> Result<output::CapturePokemonOutput, error::CapturePokemonError> {
///     todo!()
/// }
///
/// /// Retrieve information about your Pokedex.
/// async fn get_storage(input: input::GetStorageInput) -> Result<output::GetStorageOutput, error::GetStorageError> {
///     todo!()
/// }
/// ```
///
/// [`serve`]: https://docs.rs/hyper/0.14.16/hyper/server/struct.Builder.html#method.serve
/// [`tower::make::MakeService`]: https://docs.rs/tower/latest/tower/make/trait.MakeService.html
/// [HTTP binding traits]: https://awslabs.github.io/smithy/1.0/spec/core/http-traits.html
/// [operations]: https://awslabs.github.io/smithy/1.0/spec/core/model.html#operation
/// [Hyper server]: https://docs.rs/hyper/latest/hyper/server/index.html
pub struct OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> {
    check_health: Op0,
    do_nothing: Op1,
    get_pokemon_species: Op2,
    get_server_statistics: Op3,
    capture_pokemon: Op4,
    get_storage: Op5,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2, In3, In4, In5)>,
}
pub struct OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> {
    check_health: Option<Op0>,
    do_nothing: Option<Op1>,
    get_pokemon_species: Option<Op2>,
    get_server_statistics: Option<Op3>,
    capture_pokemon: Option<Op4>,
    get_storage: Option<Op5>,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2, In3, In4, In5)>,
}
#[derive(std::fmt::Debug)]
pub enum OperationRegistryBuilderError {
    UninitializedField(&'static str),
}
impl std::fmt::Display for OperationRegistryBuilderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UninitializedField(v) => write!(f, "{}", v),
        }
    }
}
impl std::error::Error for OperationRegistryBuilderError {}
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> std::default::Default
    for OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
{
    fn default() -> Self {
        Self {
            check_health: Default::default(),
            do_nothing: Default::default(),
            get_pokemon_species: Default::default(),
            get_server_statistics: Default::default(),
            capture_pokemon: Default::default(),
            get_storage: Default::default(),
            _phantom: std::marker::PhantomData,
        }
    }
}
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
    OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
{
    pub fn check_health(self, value: Op0) -> Self {
        let mut new = self;
        new.check_health = Some(value);
        new
    }
    pub fn do_nothing(self, value: Op1) -> Self {
        let mut new = self;
        new.do_nothing = Some(value);
        new
    }
    pub fn get_pokemon_species(self, value: Op2) -> Self {
        let mut new = self;
        new.get_pokemon_species = Some(value);
        new
    }
    pub fn get_server_statistics(self, value: Op3) -> Self {
        let mut new = self;
        new.get_server_statistics = Some(value);
        new
    }
    pub fn capture_pokemon(self, value: Op4) -> Self {
        let mut new = self;
        new.capture_pokemon = Some(value);
        new
    }
    pub fn get_storage(self, value: Op5) -> Self {
        let mut new = self;
        new.get_storage = Some(value);
        new
    }
    pub fn build(
        self,
    ) -> Result<
        OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>,
        OperationRegistryBuilderError,
    > {
        Ok(OperationRegistry {
            check_health: match self.check_health {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "check_health",
                    ))
                }
            },
            do_nothing: match self.do_nothing {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "do_nothing",
                    ))
                }
            },
            get_pokemon_species: match self.get_pokemon_species {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_pokemon_species",
                    ))
                }
            },
            get_server_statistics: match self.get_server_statistics {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_server_statistics",
                    ))
                }
            },
            capture_pokemon: match self.capture_pokemon {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "capture_pokemon",
                    ))
                }
            },
            get_storage: match self.get_storage {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_storage",
                    ))
                }
            },
            _phantom: std::marker::PhantomData,
        })
    }
}
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
    std::convert::From<
        OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>,
    > for aws_smithy_http_server::routing::Router<B>
where
    B: Send + 'static,
    Op0: crate::server_operation_handler_trait::Handler<B, In0, crate::input::CheckHealthInput>,
    In0: 'static + Send,
    Op1: crate::server_operation_handler_trait::Handler<B, In1, crate::input::DoNothingInput>,
    In1: 'static + Send,
    Op2: crate::server_operation_handler_trait::Handler<
        B,
        In2,
        crate::input::GetPokemonSpeciesInput,
    >,
    In2: 'static + Send,
    Op3: crate::server_operation_handler_trait::Handler<
        B,
        In3,
        crate::input::GetServerStatisticsInput,
    >,
    In3: 'static + Send,
    Op4: crate::server_operation_handler_trait::Handler<B, In4, crate::input::CapturePokemonInput>,
    In4: 'static + Send,
    Op5: crate::server_operation_handler_trait::Handler<B, In5, crate::input::GetStorageInput>,
    In5: 'static + Send,
{
    fn from(
        registry: OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>,
    ) -> Self {
        let check_health_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("ping")),
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let do_nothing_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("do-nothing")),
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let get_pokemon_species_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("pokemon-species")),
            aws_smithy_http_server::routing::request_spec::PathSegment::Label,
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let get_server_statistics_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("stats")),
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let capture_pokemon_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::POST,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("capture-pokemon-event")),
            aws_smithy_http_server::routing::request_spec::PathSegment::Label,
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        let get_storage_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                            http::Method::GET,
                            aws_smithy_http_server::routing::request_spec::UriSpec::new(
                                aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                                    aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
            aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("pokedex")),
            aws_smithy_http_server::routing::request_spec::PathSegment::Label,
        ]),
                                    aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
        ])
                                )
                            ),
                        );
        aws_smithy_http_server::routing::Router::new_rest_json_router(vec![
            {
                let svc = crate::server_operation_handler_trait::operation(registry.check_health);
                let request_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new();
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "check_health",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    check_health_request_spec,
                )
            },
            {
                let svc = crate::server_operation_handler_trait::operation(registry.do_nothing);
                let request_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new();
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "do_nothing",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    do_nothing_request_spec,
                )
            },
            {
                let svc =
                    crate::server_operation_handler_trait::operation(registry.get_pokemon_species);
                let request_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new();
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "get_pokemon_species",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    get_pokemon_species_request_spec,
                )
            },
            {
                let svc = crate::server_operation_handler_trait::operation(
                    registry.get_server_statistics,
                );
                let request_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new();
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "get_server_statistics",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    get_server_statistics_request_spec,
                )
            },
            {
                let svc =
                    crate::server_operation_handler_trait::operation(registry.capture_pokemon);
                let request_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new();
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "capture_pokemon",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    capture_pokemon_request_spec,
                )
            },
            {
                let svc = crate::server_operation_handler_trait::operation(registry.get_storage);
                let request_fmt = aws_smithy_http_server::instrumentation::sensitivity::RequestFmt::new().header({
                                    |name: &http::header::HeaderName| {
                                        let name_match = matches!(name.as_str(), "passcode");
                
                                        let key_suffix = None;
                let value = name_match;
                                        aws_smithy_http_server::instrumentation::sensitivity::headers::HeaderMarker { key_suffix, value }
                                    }
                                } as fn(&_) -> _).label({
                                    |index: usize| matches!(index, 1)
                                } as fn(usize) -> bool, None);
                let response_fmt =
                    aws_smithy_http_server::instrumentation::sensitivity::ResponseFmt::new();
                let svc = aws_smithy_http_server::instrumentation::InstrumentOperation::new(
                    svc,
                    "get_storage",
                )
                .request_fmt(request_fmt)
                .response_fmt(response_fmt);
                (
                    tower::util::BoxCloneService::new(svc),
                    get_storage_request_spec,
                )
            },
        ])
    }
}
