// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_output_do_nothing_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::DoNothingOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_output_get_pokemon_species_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::GetPokemonSpeciesOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        let mut array_1 = object.key("flavorTextEntries").start_array();
        for item_2 in &input.flavor_text_entries {
            {
                let mut object_3 = array_1.value().start_object();
                crate::json_ser::serialize_structure_crate_model_flavor_text(
                    &mut object_3,
                    item_2,
                )?;
                object_3.finish();
            }
        }
        array_1.finish();
    }
    {
        object.key("name").string(input.name.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_resource_not_found_exception(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ResourceNotFoundException,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_output_get_server_statistics_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::GetServerStatisticsOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("calls_count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.calls_count).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_error_invalid_pokeball_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::InvalidPokeballError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("pokeball").string(input.pokeball.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_master_ball_unsuccessful(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::MasterBallUnsuccessful,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("message").string(input.message.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_unsupported_region_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::UnsupportedRegionError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("region").string(input.region.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_throttling_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ThrottlingError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_output_get_storage_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::GetStorageOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        let mut array_4 = object.key("collection").start_array();
        for item_5 in &input.collection {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_error_not_authorized(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::NotAuthorized,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_model_flavor_text(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlavorText,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("flavorText").string(input.flavor_text.as_str());
    }
    {
        object.key("language").string(input.language.as_str());
    }
    Ok(())
}
